@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin prefix($property, $value, $vendors: webkit moz ms o) { 
  @if $vendors {
    @each $vendor in $vendors {
      #{"-" + $vendor + "-" + $property}: #{$value};
    }
  }
  #{$property}: #{$value};
}

/*for retina*/
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin text-shadow($distance, $top){
  text-shadow: $distance $top 3px rgba(0, 0, 0, 0.42);
}

/*Mixin created by John Grishin*/
@mixin border-gradient($from, $to, $weight: 0) {
  $mix-main: mix($from, $to);
  $mix-sub-from: mix($mix-main, $from);
  $mix-sub-to: mix($mix-main, $to);
  
  box-shadow: 0 1px 0 $weight rgba($mix-sub-to, .25),
              0 -1px 0 $weight rgba($mix-sub-from, .25),
              1px 0 0 $weight rgba($mix-sub-to, .25),
              -1px 0 0 $weight  rgba($mix-sub-from, .25),
              1px -1px 0 $weight rgba($mix-main, .5),
              -1px 1px 0 $weight rgba($mix-main, .5),
              1px 1px 0 $weight rgba($to, .75),
              -1px -1px 0 $weight rgba($from, .75);
}

/*Mixin for viewport unit fallbacks*/
/*Width and height for screensizes*/
@mixin vu($property, $unit, $width){
    // Store $input unit 
  $u: unit($unit);
  // Remove unit from $input and convert to ratio
  $ratio: $unit / ($unit * 0 + 1) / 100;
  // Calc and store return values
  $widthVal: floor($width * $ratio);
  
  @if $u == vw { 
    #{$property}: #{$widthVal};
  }

  #{$property}: #{$unit};
}